/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDasherView.java
 *
 * Created on Nov 3, 2009, 4:32:31 PM
 */

package dasher.ui;

// <editor-fold defaultstate="collapsed" desc="import ...">
import dasher.applet.DasherTasklet;
import dasher.applet.JDasher;
import dasher.applet.JDasherHost;
import dasher.applet.JDasherMenuBar;
import dasher.applet.JDasherMenuBarListener;
import dasher.applet.ScreenOverlay;
import dasher.settings.Ebp_parameters;
import dasher.settings.Elp_parameters;
import dasher.settings.Esp_parameters;
import dasher.settings.StaticSettingsManager;
import dasher.resources.StaticResourceManager;
import dasher.utils.ExtensionFileFilter;
import dasher.utils.MenuReader;
import java.awt.Font;
import java.awt.datatransfer.Clipboard;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
// </editor-fold>

/**
 *
 * @author joshua
 */
public class JDasherView extends javax.swing.JPanel implements MouseListener, KeyListener, JDasherMenuBarListener, JDasherHost, dasher.utils.FontListener {

    /** Creates new form JDasherView */
    public JDasherView() {
        initDasher();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane = new javax.swing.JSplitPane();
        jScrollPane = new javax.swing.JScrollPane();
        jDasherEdit = new dasher.applet.JDasherEdit();
        jDasherPanel = new dasher.applet.JDasherPanel(dInterface);

        jSplitPane.setDividerLocation(450);
        jSplitPane.setDividerSize(5);
        jSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane.setResizeWeight(0.9);

        jDasherEdit.setColumns(20);
        jDasherEdit.setRows(5);
        jScrollPane.setViewportView(jDasherEdit);

        jSplitPane.setBottomComponent(jScrollPane);

        org.jdesktop.layout.GroupLayout jDasherPanelLayout = new org.jdesktop.layout.GroupLayout(jDasherPanel);
        jDasherPanel.setLayout(jDasherPanelLayout);
        jDasherPanelLayout.setHorizontalGroup(
            jDasherPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 796, Short.MAX_VALUE)
        );
        jDasherPanelLayout.setVerticalGroup(
            jDasherPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 469, Short.MAX_VALUE)
        );

        jSplitPane.setLeftComponent(jDasherPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Variables and Properties">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private dasher.applet.JDasherEdit jDasherEdit;
    private dasher.applet.JDasherPanel jDasherPanel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSplitPane jSplitPane;
    // End of variables declaration//GEN-END:variables

    /**
     * The Logger for this class.
     */
    private static Logger log = Logger.getLogger(JDasherView.class.getName());

    // <editor-fold defaultstate="collapsed" desc="dInterface prop (r/o)">
    /**
     * Instance of dInterface which does the work
     */
//    public JDasher dInterface;
    protected JDasher dInterface;

    /**
     * Get the value of dInterface
     *
     * @return the value of dInterface
     */
    public JDasher getDasherInterface() {
        return dInterface;
    }// </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="MenuBar prop (r/o)">
    /**
     * Our menu bar
     * TODO: extract MenuBar
     */
//    private JDasherMenuBar MenuBar;
    protected JDasherMenuBar MenuBar;

    /**
     * Get the value of MenuBar
     *
     * @return the value of MenuBar
     */
    public JMenuBar getMenuBar() {
        return MenuBar;
    }// </editor-fold>

    /**
     * Overlay to display when dInterface is locked
     * TODO: extract ProgressMeter
     */
    private ScreenOverlay ProgressMeter;

    /**
     * File chooser to use
     */
    private JFileChooser fileChooser;
    private File file;

    protected boolean newFile = true;
    // TODO: Find some way of making fileNotSaved reliable.
    protected boolean fileNotSaved = false;
    // Create random number generator.
    Random random = new Random();
    protected PreferencesForm prefDialog = null;

    /**
     * Reference to the JFrame this is in, if any.
     * Used to set the title when the file changes.
     * TODO: find a cleaner way to set the title of the JFrame.
     */
    private JFrame mainFrame;
    /**
     * Clipboard object
     */
    public Clipboard m_Clipboard;
    /**
     * Scheduling agent used to cue new frames
     */
    private Timer taskScheduler;
    // </editor-fold>

    /**
     * Instantiates dInterface, gets a handle to the system clipboard
     * if possible, calls constructGUIPanel to produce our GUI,
     * and informs dInterface of the dScreen Panel created by this method
     * using the ChangeScreen method.
     * <p>
     * Finally, we call constructMenus to produce our menu bar.
     */
    public void initDasher() {

        /* Instantiate dInterface. */
        dInterface = new JDasher(this);

        /* Try to create a clipboard
         * TODO: make a standard application clipboard
         */
        try {
            m_Clipboard = java.awt.Toolkit.getDefaultToolkit().getSystemClipboard();
        } catch (Exception e) {
            log.fine("Could not get the system clipboard.");
            m_Clipboard = new java.awt.datatransfer.Clipboard("Private clipboard");
        }

        /* Create the file chooser */
        fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new ExtensionFileFilter("txt", "Text"));

        // TODO: fix ProgressMeter
        ProgressMeter = new ScreenOverlay();

        //this.add(constructGUIPanel(this.getSize()));
        
        // Ick: arbitrary placeholder constants
//        dPanel = new JDasherPanel(dInterface, 100, 100);

        /* Constuct the NetBeans GUI */
        initComponents();
//        jSplitPane.setTopComponent(dPanel);

        /* Set the active file to a new file */
        menuNew();

        /* Inform dInterface that we have created a dScreen and it can now display.
         * This will cause the View to instantiate too, due to the ChangeView
         * method (which in turn fires in response to a parameter-change event!)
         */
        dInterface.Realize();
        dInterface.ChangeScreen(jDasherPanel.getScreen());

        /* Simple threaded scheduling. The C++ version calls NewFrame directly
         * every 20 ms as part of a message-processing loop. This is not entirely
         * suitable for Java as we need the Applet to be idle on some occasions
         * so that we can process the MouseEvents detailing where the pointer
         * is at present. This is actually much less efficient, but I don't think
         * we can ask "where is the pointer now?" in Java, as in C++;
         * we must use a MouseMotionListener.
         * TODO: Make it track to mouse more efficiently
         */
        //TimerTask doFrame = new DoFrameTask(this);
        //taskScheduler = new Timer();
        //taskScheduler.scheduleAtFixedRate(doFrame, 0, 20);
        /* The applet itself will handle MouseEvents relating to clicks; these will
         * be fed into the interface via KeyDown, which also accounts for mouse-clicks.
         * Further it handles actual keyboard events. The code for this may be moved
         * out to some dedicated event-handler code in the future, but there is no
         * particular reason to do so other than for tidiness' sake.
         * TODO: Make handling events on JDasherPanel it's own busuiness
         */
        this.addMouseListener(this);
        this.addKeyListener(this);

        /* Next, make our menus */
        try {
            JComponent menuBar = (new MenuReader()).parse(StaticResourceManager.getResourceStream("menus.xml"), (Object) this, false);
            MenuBar = (JDasherMenuBar) menuBar;
            // (Parameter-holding object, some action-listener, some item-listener)
        } catch (Exception ex) {
            MenuBar = constructMenus();
            Logger.getLogger(JDasherView.class.getName()).log(Level.SEVERE, "Failed to load menu bar.  Loading default.", ex);
        }
    }

    /**
     * Produces our menu bar (a JDasherMenuBar) and returns it.
     * <p>
     * After instantiating, its options are set from dInterface's
     * current settings. For example, we cause the current Alphabet
     * to be set as 'selected' in the menu bar.
     *
     * @return newMenuBar to be added to our Applet
     * @deprecated replaced with MenuReader and perhaps in the future with
     *              NetBeans GUI builder
     */
    public JDasherMenuBar constructMenus() {

        JDasherMenuBar newMenuBar = new JDasherMenuBar(this);

        ArrayList<String> colours = new ArrayList<String>();
        dInterface.GetColours(colours);
        newMenuBar.setColours(colours, dInterface.getSetting(Esp_parameters.SP_COLOUR_ID));

        ArrayList<String> alphs = new ArrayList<String>();
        dInterface.GetAlphabets(alphs);
        newMenuBar.setAlphabets(alphs, dInterface.getSetting(Esp_parameters.SP_ALPHABET_ID));

        newMenuBar.setSelectedFontSize((int) dInterface.getSetting(Elp_parameters.LP_DASHER_FONTSIZE));
        newMenuBar.setInputFilter(dInterface.getSetting(Esp_parameters.SP_INPUT_FILTER));
        newMenuBar.setMouseLine(dInterface.getSetting(Ebp_parameters.BP_DRAW_MOUSE_LINE));
        newMenuBar.setStartMouse(dInterface.getSetting(Ebp_parameters.BP_START_MOUSE));
        newMenuBar.setStartSpace(dInterface.getSetting(Ebp_parameters.BP_START_SPACE));
        newMenuBar.setSelectedLM((int) dInterface.getSetting(Elp_parameters.LP_LANGUAGE_MODEL_ID));
        newMenuBar.setSpeedAuto(dInterface.getSetting(Ebp_parameters.BP_AUTO_SPEEDCONTROL));
        newMenuBar.setLangModelLearns(dInterface.getSetting(Ebp_parameters.BP_LM_ADAPTIVE));

        m_Clipboard.addFlavorListener(newMenuBar);

        return newMenuBar;

    }

    /**
     * Setter for mainFrame.
     *
     * @see #mainFrame
     */
    public void setMainFrame(JFrame newMainFrame) {
        mainFrame = newMainFrame;
    }

    /**
     * Sets the file that we are working with.
     * Also sets the mainFrame's title.  I know,
     * this is a horrible way to do it.
     *
     * @param newFile
     */
    protected void setFile(File newFile) {
        dInterface.setFile(newFile);
        fileChooser.setSelectedFile(file);
        StaticSettingsManager.S.Filename.set(newFile.toString());
//        if (mainFrame != null) {
//            mainFrame.setTitle(String.format("JDasher (%s)", file));
//        }
    }

    /**
     * Converts dInterface's message dialog types into JOptionPane's
     * constants with the same meaning. For example, type 0 becomes
     * JOptionPane.INFORMATION_MESSAGE.
     * <p>
     * If asked to convert an invalid message type, -1 is returned.
     *
     * @param type Type to convert.
     * @return JOptionPane equivalent constant
     */
    private int getMessageType(int type) {

        // Convert internal message types to those used by JOptionPane.

        if (type == 0) {
            return JOptionPane.INFORMATION_MESSAGE;
        }
        if (type == 1) {
            return JOptionPane.WARNING_MESSAGE;
        }
        if (type == 2) {
            return JOptionPane.ERROR_MESSAGE;
        }

        return -1;
    }

    public void infoMessage(String msg) {
        JOptionPane.showMessageDialog(this, msg);
    }

    /**
     * Cancels our new frame scheduler, and calls dInterface's
     * DestroyInterface method to give it an opportunity to
     * clean up if necessary.
     * <p>
     * Ultimately any neglected cleaning is likely not to
     * cause a problem, as we are about to stop the application.
     */
    public void stop() {
        if (taskScheduler != null) {
            taskScheduler.cancel();
        }
        jDasherPanel.setPaused(true);
        dInterface.DestroyInterface();
    }

    public void openFile(File file) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(file));
        StringBuffer sbuf = new StringBuffer();
        char[] cbuf = new char[100];
        int read;
        do {
            read = reader.read(cbuf);
            if (read != -1) {
                sbuf.append(cbuf, 0, read);
            }
        } while (read != -1);
        reader.close();
        jDasherEdit.setText(sbuf.toString());
        dInterface.InvalidateContext(true);
        newFile = fileNotSaved = false;
        setFile(file);
    }

    public void openFile(String file) throws IOException {
        openFile(new File(file));
    }

    /**
     * Retrieves the current jDasherEdit text. This method exists
     * for the purposes of JavaScript calling in to invoke unsafe
     * functions.
     * <p>
     * Thankfully, this doesn't work on FireFox.
     *
     * @return Current jDasherEdit contents
     */
    public String getCurrentEditBoxText() {

        return jDasherEdit.getText();

    }

    // <editor-fold defaultstate="collapsed" desc="JDasherHost impl">
    /**
     * The Applet responds to the following parameter events:
     * <p>
     * <i>BP_DASHER_PAUSED</i>: We start/stop requesting frames
     * at a regular interval depending on whether dInterface is
     * currently paused.
     * <p>
     * <i>LP_LANGUAGE_MODEL_ID</i>: Updates our newMenuBar's currently
     * selected language model to reflect that which has been
     * chosen.
     * <p>
     * <i>SP_COLOUR_ID</i>: Updates our newMenuBar's currently selected
     * colour scheme to reflect that which has been chosen. Usually
     * this occurs in response to an alphabet specifying its own
     * colour scheme.
     * <p>
     * The Applet also responds to LockEvents by showing our ScreenOverlay
     * when locked and updating its progress bar, and MessageEvents
     * by showing a message dialog.
     * <p>
     * Finally we pass the event on to the jDasherEdit, in case some
     * handling is required there as well.
     * <p>
     * TODO: Revamp the dInterface event system
     */
    public void handleEvent(dasher.events.CEvent event) {

        if (event.m_iEventType == 1) { // Parameter change notification

            dasher.events.CParameterNotificationEvent evt = (dasher.events.CParameterNotificationEvent) event;

            if (evt.m_iParameter == dasher.settings.Ebp_parameters.BP_DASHER_PAUSED) {
                jDasherPanel.setPaused(dInterface.getSetting(dasher.settings.Ebp_parameters.BP_DASHER_PAUSED));
//                if (dInterface.getSetting(dasher.core.Ebp_parameters.BP_DASHER_PAUSED)) {
//                    if (taskScheduler != null)
//                        taskScheduler.cancel();
//                    taskScheduler = null;
//                } else {
//                    TimerTask doFrame = new DoFrameTask(this);
//                    taskScheduler = new Timer();
//                    taskScheduler.scheduleAtFixedRate(doFrame, 0, 20);
//                }
            } else if (evt.m_iParameter == dasher.settings.Elp_parameters.LP_LANGUAGE_MODEL_ID) {
                if (MenuBar != null) {
                    MenuBar.setSelectedLM((int) dInterface.getSetting(dasher.settings.Elp_parameters.LP_LANGUAGE_MODEL_ID));
                }
            } else if (evt.m_iParameter == dasher.settings.Esp_parameters.SP_COLOUR_ID) {
                if (MenuBar != null) {
                    MenuBar.setSelectedColour(dInterface.getSetting(dasher.settings.Esp_parameters.SP_COLOUR_ID));
                }
            }

        } else if (event.m_iEventType == 7) { // Lock event (training progress report)
            dasher.events.CLockEvent evt = (dasher.events.CLockEvent) event;

            if (evt.m_bLock) {
                ProgressMeter.setVisible(true);
                ProgressMeter.setProgressBarVisible(true);

                try {
                    java.awt.Point myloc = this.getLocationOnScreen();
                    ProgressMeter.setLocation(((myloc.x + this.getWidth()) / 2) - 100, ((myloc.y + this.getHeight()) / 2) - 50);
                } catch (Exception e) {
                    // ignore; this means we're not visible.
                }

                ProgressMeter.setText(evt.m_strMessage);

                ProgressMeter.setProgress(evt.m_iPercent, 100);
            } else {
                ProgressMeter.setVisible(false);
            }


        } else if (event.m_iEventType == 8) { // Requested message display

            dasher.events.CMessageEvent evt = (dasher.events.CMessageEvent) event;

            JOptionPane.showMessageDialog(this, evt.m_strMessage, "JDasher", getMessageType(evt.m_iType));

        }
        if (jDasherEdit != null) {
            jDasherEdit.handleEvent(event);
        }

    }

    /**
     * Calls the applet's repaint method to trigger a redraw
     * of dInterface.
     * <p>
     * This method is called by dInterface when it wishes to be redrawn;
     * the process has to be started from the top because it is
     * tied in with Swing's painting architecture.
     */
    public void Redraw() {
        repaint();
    }


    /**
     * Adds a MouseMotionListener; requested by dInterface in order
     * to hook its JMouseInput object up to hear mouse events.
     */
    public void setMouseInput(MouseMotionListener e) {
        this.addMouseMotionListener(e);
    }// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="JDasherMenuListener impl">
    /**
     * Sets our edit box font
     *
     * @param f New font
     */
    public void setNewFont(Font f) {

        jDasherEdit.setFont(f);

    }

    /**
     * Copies the current edit box selection to the clipboard if
     * possible.
     */
    public void menuCopy() {
        try {
            m_Clipboard.setContents(new java.awt.datatransfer.StringSelection(jDasherEdit.getSelectedText()), null);
        } catch (Exception ex) {
            log.log(Level.WARNING, "Copy to clipboard failed.", ex);
        }
    }

    /**
     * Cuts the current edit box selection to the clipboard if
     * possible.
     */
    public void menuCut() {
        try {
            m_Clipboard.setContents(new java.awt.datatransfer.StringSelection(jDasherEdit.getSelectedText()), null);
            jDasherEdit.replaceSelection("");
        } catch (Exception ex) {
            log.log(Level.WARNING, "Cut to clipboard failed.", ex);
        }
    }

    /**
     * Quits dInterface
     */
    public void menuExit() {
        if (fileNotSaved) {
            switch (JOptionPane.showConfirmDialog(null,
                    "The file is not saved.  Do you want to save it before exiting?",
                    "File Not Saved",
                    JOptionPane.YES_NO_CANCEL_OPTION)) {
                case JOptionPane.YES_OPTION:
                    menuSave();
                    break;
                case JOptionPane.NO_OPTION:
                    break;
                default:
                    return;
            }
        }
        log.fine("Exiting JDasher.");
        System.exit(0); // Should make this tidier...
    }

    /**
     * Displays an About dialog.
     */
    public void menuHelpAbout() {
        JOptionPane.showMessageDialog(this, "JDasher\nA Java adaptation of Dasher",
                "About JDasher", JOptionPane.INFORMATION_MESSAGE);
    }

    public void menuAbout() {
        menuHelpAbout();
    }

    /**
     * Blanks the jDasherEdit and invalidates our current context.
     */
    public void menuNew() {
        newFile = true;
        setFile(new File("dasher-" + Long.toHexString(random.nextLong()) + ".txt"));
        this.jDasherEdit.setText("");
        this.dInterface.InvalidateContext(true);
    }

    /**
     * Saves the current text to the current file.  This may just default to
     * the file set in menuNew.
     */
    public void menuSave() {
        if (newFile) {
            menuSaveAs();
            return;
        }
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(file));
            writer.write(jDasherEdit.getText());
            writer.close();
        } catch (IOException e) {
            log.log(Level.WARNING, "Save failed.", e);
        }
    }

    /**
     * Sets the current file to a file selected by the user and call menuSave.
     */
    public void menuSaveAs() {
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            setFile(fileChooser.getSelectedFile());
            newFile = false;
            menuSave();
        }
    }

    /**
     * Has the user select a file and open it.
     */
    public void menuOpen() {
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                openFile(fileChooser.getSelectedFile());
            } catch (IOException e) {
                log.log(Level.WARNING, "Could not open file %s.", file);
            }
        }
    }

    /**
     * Has the user select a file to train the language model with.
     * TODO: Why dosn't menuTrain work?
     */
    public void menuTrain() {
        JOptionPane.showMessageDialog(this, "Training from external file is expirimental.");
        if (fileChooser.showDialog(this, "Train") == JFileChooser.APPROVE_OPTION) {
            try {
                File train = fileChooser.getSelectedFile();
                FileInputStream in = new FileInputStream(train);
                BufferedInputStream buffin = new BufferedInputStream(in);
                dInterface.TrainStream(buffin, train.length(), 0, true);
            } catch (IOException e) {
                log.log(Level.WARNING, "Training failed.", e);
            }
        }
    }

    /**
     * Attempts to paste from the clipboard, overwriting our current
     * jDasherEdit selection if there is one.
     */
    public void menuPaste() {
        try {
            java.awt.datatransfer.Transferable clipContents = m_Clipboard.getContents(null);
            String temp = (String) clipContents.getTransferData(java.awt.datatransfer.DataFlavor.stringFlavor);
            jDasherEdit.replaceSelection(temp);
        } catch (Exception ex) {
            log.log(Level.WARNING, "Paste from clipboard failed.", ex);
        }
    }

    public void menuSelectAll() {
        jDasherEdit.setSelectionStart(0);
        jDasherEdit.setSelectionEnd(jDasherEdit.getText().length());
    }

    public void menuCopyAll() {
        try {
            m_Clipboard.setContents(new java.awt.datatransfer.StringSelection(jDasherEdit.getText()), null);
        } catch (Exception ex) {
            log.log(Level.WARNING, "Copy to clipboard failed.", ex);
        }
    }

    public void menuSpellCheck() {
        jDasherEdit.spellCheck();
    }

    public void menuPreferences() {
        if (prefDialog == null) {
            prefDialog = new PreferencesForm(dInterface, jDasherEdit);
        }
        prefDialog.resetPreferencesForm();
        prefDialog.setVisible(true);
        prefDialog.toFront();
    }

    /**
     * Opens the Select Font dialog in order to choose a new
     * jDasherEdit font
     */
    public void menuSelFont() {
        new dasher.utils.JFontDialog(this, jDasherEdit.getFont()).setVisible(true);
    }

    /**
     * Sets dInterface's LP_MAX_BITRATE parameter to a given value
     *
     * @param speed New LP_MAX_BITRATE
     */
    public void menuSetDasherSpeed(int speed) {

        final int f_speed = speed;

        jDasherPanel.addTasklet(new DasherTasklet() {

            public void run() {
                dInterface.SetLongParameter(Elp_parameters.LP_MAX_BITRATE, f_speed);
            }
        });

    }

    /**
     * Sets the dInterface font size (LP_DASHER_FONTSIZE) to a given value.
     *
     * @param size New size; either 1, 2 or 4.
     */
    public void menuSetFontSize(int size) {

        final int f_size = size;

        jDasherPanel.addTasklet(new DasherTasklet() {

            public void run() {
                dInterface.SetLongParameter(Elp_parameters.LP_DASHER_FONTSIZE, f_size);
            }
        });

    }

    /**
     * Sets the input filter (SP_INPUT_FILTER) to a given String.
     *
     * @param filter Name of new input filter
     */
    public void menuSetInputFilter(String filter) {

        final String f_filter = filter;

        jDasherPanel.addTasklet(new DasherTasklet() {

            public void run() {
                dInterface.SetStringParameter(Esp_parameters.SP_INPUT_FILTER, f_filter);
            }
        });

    }

    /**
     * Sets the currently selected language model to a given ID.
     * <p>
     * If an ID of 5 (corresponding to the RemotePPM language model)
     * is selected, we first prompt the user to name a host and set
     * the SP_LM_HOST parameter to their chosen value.
     * <p>
     * In any case, we end up setting LP_LANGUAGE_MODEL_ID.
     *
     * @param LMID New LM ID
     */
    public void menuSetLMID(final int LMID) {
        if (LMID == 5) { // Network PPM
            final String hostName = JOptionPane.showInputDialog("Please enter the language model host address", dInterface.getSetting(Esp_parameters.SP_LM_HOST));

            if (hostName != null) {

                jDasherPanel.addTasklet(new DasherTasklet() {

                    public void run() {
                        dInterface.SetBoolParameter(Ebp_parameters.BP_CONNECT_LOCK, true);
                        // Set the connect lock so the user can't move whilst establishing connection.

                        dInterface.SetStringParameter(Esp_parameters.SP_LM_HOST, hostName);

                        dInterface.SetLongParameter(Elp_parameters.LP_LANGUAGE_MODEL_ID, 5);
                    }
                });


            }
        } else {

            jDasherPanel.addTasklet(new DasherTasklet() {

                public void run() {
                    dInterface.SetLongParameter(Elp_parameters.LP_LANGUAGE_MODEL_ID, LMID);
                }
            });

        }

    }

    /**
     * Sets BP_LM_ADAPTIVE
     *
     * @param enabled New value
     */
    public void menuSetLMLearn(final boolean enabled) {

        jDasherPanel.addTasklet(new DasherTasklet() {

            public void run() {
                dInterface.SetBoolParameter(Ebp_parameters.BP_LM_ADAPTIVE, enabled);
            }
        });

    }

    /**
     * Sets BP_DRAW_MOUSE_LINE
     *
     * @param enabled New value
     */
    public void menuSetMouseLine(final boolean enabled) {

        jDasherPanel.addTasklet(new DasherTasklet() {

            public void run() {
                dInterface.SetBoolParameter(Ebp_parameters.BP_DRAW_MOUSE_LINE, enabled);
            }
        });

    }

    /**
     * Sets BP_AUTO_SPEEDCONTROL
     *
     * @param enabled New value
     */
    public void menuSetSpeedAuto(final boolean enabled) {

        jDasherPanel.addTasklet(new DasherTasklet() {

            public void run() {
                dInterface.SetBoolParameter(Ebp_parameters.BP_AUTO_SPEEDCONTROL, enabled);
            }
        });

    }

    /**
     * Sets BP_START_MOUSE
     *
     * @param enabled New value
     */
    public void menuSetStartMouse(final boolean enabled) {
        jDasherPanel.addTasklet(new DasherTasklet() {

            public void run() {
                dInterface.SetBoolParameter(Ebp_parameters.BP_START_MOUSE, enabled);
            }
        });

    }

    /**
     * Sets BP_START_SPACE
     *
     * @param enabled New value
     */
    public void menuSetStartSpace(final boolean enabled) {
        jDasherPanel.addTasklet(new DasherTasklet() {

            public void run() {
                dInterface.SetBoolParameter(Ebp_parameters.BP_START_SPACE, enabled);
            }
        });
    }

    /**
     * Sets the currently selected alphabet
     *
     * @param newalph Alphabet to select
     */
    public void menuSetAlph(final String newalph) {

        ArrayList<String> Alphs = new ArrayList<String>();
        dInterface.GetAlphabets(Alphs);

        for (String thisAlph : Alphs) {
            if (thisAlph.equals(newalph)) {
                jDasherPanel.addTasklet(new DasherTasklet() {

                    public void run() {
                        dInterface.SetStringParameter(Esp_parameters.SP_ALPHABET_ID, newalph);
                    }
                });
                return;
            }
        }

    }

    /**
     * Sets the currently selected colourscheme
     *
     * @param newcolours Colour scheme to select
     */
    public void menuSetColours(String newcolours) {

        ArrayList<String> Colours = new ArrayList<String>();
        dInterface.GetColours(Colours);

        for (String thisColour : Colours) {
            if (thisColour.equals(newcolours)) {
                final String col = thisColour;
                jDasherPanel.addTasklet(new DasherTasklet() {

                    public void run() {
                        dInterface.SetStringParameter(Esp_parameters.SP_COLOUR_ID, col);
                    }
                });
                return;
            }
        }

    }
    
    /**
     * Checks with the clipboard whether a given data flavour
     * is enabled.
     * <p>
     * Typically this is used to check whether it is sensible
     * to attempt Paste at the moment.
     *
     * @param flavour Flavour to check availability
     * @return True if available at present, false otherwise.
     */
    public boolean isDataFlavorAvailable(java.awt.datatransfer.DataFlavor flavour) {
        return m_Clipboard.isDataFlavorAvailable(flavour);
    }// </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="MouseListener impl">
    /**
     * MouseClicks are responded to by feeding dInterface a KeyDown
     * event. See CDasherInterfaceBase.KeyDown.
     */
    public void mouseClicked(MouseEvent e) {

        if (e.getButton() == MouseEvent.BUTTON1) {
            dInterface.KeyDown(System.currentTimeMillis(), 100);
        }

    }

    /**
     * Ignored
     */
    public void mouseEntered(MouseEvent arg0) {
    }

    /**
     * Ignored
     */
    public void mouseExited(MouseEvent arg0) {
    }

    /**
     * Ignored
     */
    public void mousePressed(MouseEvent arg0) {
    }

    /**
     * Ignored
     */
    public void mouseReleased(MouseEvent arg0) {
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="KeyListener impl">
    /**
     * We respond to the following key presses:
     * <p>
     * CTRL: Set speed boost factor to 175<br>
     * SHIFT: Set speed boost factor to 25.
     * </p>
     */
    public void keyPressed(KeyEvent e) {

        if (e.getKeyCode() == KeyEvent.VK_CONTROL) {
            jDasherPanel.addTasklet(new DasherTasklet() {

                public void run() {
                    dInterface.SetLongParameter(Elp_parameters.LP_BOOSTFACTOR, 175);
                }
            });

        }

        // Speed boost for pressing CTRL. Should this be in the interface?

        if (e.getKeyCode() == KeyEvent.VK_SHIFT) {
            jDasherPanel.addTasklet(new DasherTasklet() {

                public void run() {
                    dInterface.SetLongParameter(Elp_parameters.LP_BOOSTFACTOR, 25);
                }
            });
        }

        // Speed reduced when SHIFT pressed. As above?

    }

    /**
     * Upon releasing the space bar, we signal dInterface a KeyDown
     * event with a key of zero.
     * <p>
     * If either CTRL or SHIFT are released, the speed boost
     * constant is reset to 100, 175 or 25, dependent on which
     * keys are still down.
     */
    public void keyReleased(KeyEvent e) {

        /* dInterface will start when SPACE is pressed. */

        if (e.getKeyCode() == KeyEvent.VK_SPACE) {
            dInterface.KeyDown(System.currentTimeMillis(), 0);
        }


        /* This completes the boost-key implementation by considering
         * whether the other boost key is currently pressed when one
         * is released.
         */

        if (e.getKeyCode() == KeyEvent.VK_CONTROL) {
            if (e.isShiftDown()) {
                jDasherPanel.addTasklet(new DasherTasklet() {

                    public void run() {
                        dInterface.SetLongParameter(Elp_parameters.LP_BOOSTFACTOR, 25);
                    }
                });
            } else {
                jDasherPanel.addTasklet(new DasherTasklet() {

                    public void run() {
                        dInterface.SetLongParameter(Elp_parameters.LP_BOOSTFACTOR, 100);
                    }
                });
            }
        }
        if (e.getKeyCode() == KeyEvent.VK_SHIFT) {
            if (e.isControlDown()) {
                jDasherPanel.addTasklet(new DasherTasklet() {

                    public void run() {
                        dInterface.SetLongParameter(Elp_parameters.LP_BOOSTFACTOR, 175);
                    }
                });
            } else {
                jDasherPanel.addTasklet(new DasherTasklet() {

                    public void run() {
                        dInterface.SetLongParameter(Elp_parameters.LP_BOOSTFACTOR, 100);
                    }
                });
            }
        }
    }

    /**
     * Ignored
     */
    public void keyTyped(KeyEvent arg0) {
    }
    // </editor-fold>

}